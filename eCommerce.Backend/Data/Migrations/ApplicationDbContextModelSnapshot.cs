// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using eCommerce.Backend.Data;

#nullable disable

namespace eCommerce.Backend.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("eCommerce.Backend.Models.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsShowOnHome")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Brands", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2022, 3, 19, 22, 15, 7, 25, DateTimeKind.Local).AddTicks(5490),
                            Image = "",
                            IsShowOnHome = true,
                            Name = "Andora",
                            SortOrder = 0,
                            Status = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2022, 3, 19, 22, 15, 7, 25, DateTimeKind.Local).AddTicks(5520),
                            Image = "",
                            IsShowOnHome = true,
                            Name = "Apple",
                            SortOrder = 0,
                            Status = 1
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2022, 3, 19, 22, 15, 7, 25, DateTimeKind.Local).AddTicks(5520),
                            Image = "",
                            IsShowOnHome = true,
                            Name = "Anker",
                            SortOrder = 0,
                            Status = 1
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2022, 3, 19, 22, 15, 7, 25, DateTimeKind.Local).AddTicks(5520),
                            Image = "",
                            IsShowOnHome = true,
                            Name = "Baseus",
                            SortOrder = 0,
                            Status = 1
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2022, 3, 19, 22, 15, 7, 25, DateTimeKind.Local).AddTicks(5520),
                            Image = "",
                            IsShowOnHome = true,
                            Name = "Hyper",
                            SortOrder = 0,
                            Status = 1
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(2022, 3, 19, 22, 15, 7, 25, DateTimeKind.Local).AddTicks(5520),
                            Image = "",
                            IsShowOnHome = true,
                            Name = "Filco",
                            SortOrder = 0,
                            Status = 1
                        },
                        new
                        {
                            Id = 7,
                            CreatedDate = new DateTime(2022, 3, 19, 22, 15, 7, 25, DateTimeKind.Local).AddTicks(5520),
                            Image = "",
                            IsShowOnHome = true,
                            Name = "JCPAL",
                            SortOrder = 0,
                            Status = 1
                        },
                        new
                        {
                            Id = 8,
                            CreatedDate = new DateTime(2022, 3, 19, 22, 15, 7, 25, DateTimeKind.Local).AddTicks(5530),
                            Image = "",
                            IsShowOnHome = true,
                            Name = "Keychrone",
                            SortOrder = 0,
                            Status = 1
                        },
                        new
                        {
                            Id = 9,
                            CreatedDate = new DateTime(2022, 3, 19, 22, 15, 7, 25, DateTimeKind.Local).AddTicks(5530),
                            Image = "",
                            IsShowOnHome = true,
                            Name = "Lofree",
                            SortOrder = 0,
                            Status = 1
                        },
                        new
                        {
                            Id = 10,
                            CreatedDate = new DateTime(2022, 3, 19, 22, 15, 7, 25, DateTimeKind.Local).AddTicks(5630),
                            Image = "",
                            IsShowOnHome = true,
                            Name = "Logitech",
                            SortOrder = 0,
                            Status = 1
                        },
                        new
                        {
                            Id = 11,
                            CreatedDate = new DateTime(2022, 3, 19, 22, 15, 7, 25, DateTimeKind.Local).AddTicks(5630),
                            Image = "",
                            IsShowOnHome = true,
                            Name = "Mocoll",
                            SortOrder = 0,
                            Status = 1
                        },
                        new
                        {
                            Id = 13,
                            CreatedDate = new DateTime(2022, 3, 19, 22, 15, 7, 25, DateTimeKind.Local).AddTicks(5630),
                            Image = "",
                            IsShowOnHome = true,
                            Name = "Philips",
                            SortOrder = 0,
                            Status = 1
                        },
                        new
                        {
                            Id = 14,
                            CreatedDate = new DateTime(2022, 3, 19, 22, 15, 7, 25, DateTimeKind.Local).AddTicks(5640),
                            Image = "",
                            IsShowOnHome = true,
                            Name = "Tucano",
                            SortOrder = 0,
                            Status = 1
                        },
                        new
                        {
                            Id = 15,
                            CreatedDate = new DateTime(2022, 3, 19, 22, 15, 7, 25, DateTimeKind.Local).AddTicks(5640),
                            Image = "",
                            IsShowOnHome = true,
                            Name = "WIWU",
                            SortOrder = 0,
                            Status = 1
                        });
                });

            modelBuilder.Entity("eCommerce.Backend.Models.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Carts", (string)null);
                });

            modelBuilder.Entity("eCommerce.Backend.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsShowOnHome")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2022, 3, 19, 22, 15, 7, 25, DateTimeKind.Local).AddTicks(5750),
                            Description = "Lorem Ipsum is simply dummy text of the printing and typesetting industry.",
                            IsShowOnHome = true,
                            Name = "Macbook's Accessories",
                            Status = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2022, 3, 19, 22, 15, 7, 25, DateTimeKind.Local).AddTicks(5750),
                            Description = "Lorem Ipsum is simply dummy text of the printing and typesetting industry.",
                            IsShowOnHome = true,
                            Name = "Iphone's Accessories",
                            Status = 1
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2022, 3, 19, 22, 15, 7, 25, DateTimeKind.Local).AddTicks(5750),
                            Description = "Lorem Ipsum is simply dummy text of the printing and typesetting industry.",
                            IsShowOnHome = true,
                            Name = "Ipad's Accessories",
                            Status = 1
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2022, 3, 19, 22, 15, 7, 25, DateTimeKind.Local).AddTicks(5760),
                            Description = "Lorem Ipsum is simply dummy text of the printing and typesetting industry.",
                            IsShowOnHome = true,
                            Name = "Mechanical",
                            Status = 1
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2022, 3, 19, 22, 15, 7, 25, DateTimeKind.Local).AddTicks(5760),
                            Description = "Lorem Ipsum is simply dummy text of the printing and typesetting industry.",
                            IsShowOnHome = true,
                            Name = "Macbook sticker",
                            ParentId = 1,
                            Status = 1
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(2022, 3, 19, 22, 15, 7, 25, DateTimeKind.Local).AddTicks(5760),
                            Description = "Lorem Ipsum is simply dummy text of the printing and typesetting industry.",
                            IsShowOnHome = true,
                            Name = "Usb-c Hub",
                            ParentId = 1,
                            Status = 1
                        },
                        new
                        {
                            Id = 7,
                            CreatedDate = new DateTime(2022, 3, 19, 22, 15, 7, 25, DateTimeKind.Local).AddTicks(5760),
                            Description = "Lorem Ipsum is simply dummy text of the printing and typesetting industry.",
                            IsShowOnHome = true,
                            Name = "Iphone Charging Cable",
                            ParentId = 2,
                            Status = 1
                        },
                        new
                        {
                            Id = 8,
                            CreatedDate = new DateTime(2022, 3, 19, 22, 15, 7, 25, DateTimeKind.Local).AddTicks(5760),
                            Description = "Lorem Ipsum is simply dummy text of the printing and typesetting industry.",
                            IsShowOnHome = true,
                            Name = "Iphone Stand",
                            ParentId = 2,
                            Status = 1
                        },
                        new
                        {
                            Id = 9,
                            CreatedDate = new DateTime(2022, 3, 19, 22, 15, 7, 25, DateTimeKind.Local).AddTicks(5760),
                            Description = "Lorem Ipsum is simply dummy text of the printing and typesetting industry.",
                            IsShowOnHome = true,
                            Name = "Ipad Case",
                            ParentId = 3,
                            Status = 1
                        },
                        new
                        {
                            Id = 10,
                            CreatedDate = new DateTime(2022, 3, 19, 22, 15, 7, 25, DateTimeKind.Local).AddTicks(5760),
                            Description = "Lorem Ipsum is simply dummy text of the printing and typesetting industry.",
                            IsShowOnHome = true,
                            Name = "Ipad Tempered Glass",
                            ParentId = 3,
                            Status = 1
                        },
                        new
                        {
                            Id = 11,
                            CreatedDate = new DateTime(2022, 3, 19, 22, 15, 7, 25, DateTimeKind.Local).AddTicks(5770),
                            Description = "Lorem Ipsum is simply dummy text of the printing and typesetting industry.",
                            IsShowOnHome = true,
                            Name = "Ipad Stand",
                            ParentId = 3,
                            Status = 1
                        },
                        new
                        {
                            Id = 12,
                            CreatedDate = new DateTime(2022, 3, 19, 22, 15, 7, 25, DateTimeKind.Local).AddTicks(5770),
                            Description = "Lorem Ipsum is simply dummy text of the printing and typesetting industry.",
                            IsShowOnHome = true,
                            Name = "Mechanical Keyboard",
                            ParentId = 4,
                            Status = 1
                        },
                        new
                        {
                            Id = 13,
                            CreatedDate = new DateTime(2022, 3, 19, 22, 15, 7, 25, DateTimeKind.Local).AddTicks(5770),
                            Description = "Lorem Ipsum is simply dummy text of the printing and typesetting industry.",
                            IsShowOnHome = true,
                            Name = "Mechanical Mouse",
                            ParentId = 4,
                            Status = 1
                        },
                        new
                        {
                            Id = 14,
                            CreatedDate = new DateTime(2022, 3, 19, 22, 15, 7, 25, DateTimeKind.Local).AddTicks(5770),
                            Description = "Lorem Ipsum is simply dummy text of the printing and typesetting industry.",
                            IsShowOnHome = true,
                            Name = "Macbook Cleaning Kit",
                            ParentId = 1,
                            Status = 1
                        });
                });

            modelBuilder.Entity("eCommerce.Backend.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("OrderDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<string>("ShipAddress")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ShipEmail")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ShipName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ShipPhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders", (string)null);
                });

            modelBuilder.Entity("eCommerce.Backend.Models.OrderDetail", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("OrderId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDetails", (string)null);
                });

            modelBuilder.Entity("eCommerce.Backend.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Images")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsFeatured")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("OriginalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Stock")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ViewCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<bool>("isDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BrandId = 7,
                            CategoryId = 14,
                            CreatedDate = new DateTime(2022, 3, 19, 22, 15, 7, 25, DateTimeKind.Local).AddTicks(5790),
                            Description = "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.",
                            Details = "Lorem Ipsum is simply dummy text of the printing and typesetting industry.",
                            IsFeatured = true,
                            Name = "JCPAL 5in1 Premium Cleaning Set For Macbook, Laptop, Phone, Camera",
                            OriginalPrice = 180000m,
                            Price = 200000m,
                            Stock = 10,
                            ViewCount = 0,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 2,
                            BrandId = 6,
                            CategoryId = 6,
                            CreatedDate = new DateTime(2022, 3, 19, 22, 15, 7, 25, DateTimeKind.Local).AddTicks(5790),
                            Description = "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.",
                            Details = "Lorem Ipsum is simply dummy text of the printing and typesetting industry.",
                            IsFeatured = true,
                            Name = "Hyperdrive Dual 4K HDMI 10in1 USB-C Hub/Port (2 monitors) Macbook M1",
                            OriginalPrice = 180000m,
                            Price = 200000m,
                            Stock = 10,
                            ViewCount = 0,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 3,
                            BrandId = 1,
                            CategoryId = 5,
                            CreatedDate = new DateTime(2022, 3, 19, 22, 15, 7, 25, DateTimeKind.Local).AddTicks(5790),
                            Description = "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.",
                            Details = "Lorem Ipsum is simply dummy text of the printing and typesetting industry.",
                            IsFeatured = true,
                            Name = "Andora 6in1 Macbook Stickers For Macbook Pro 16 inch 2021",
                            OriginalPrice = 600000m,
                            Price = 650000m,
                            Stock = 10,
                            ViewCount = 0,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 4,
                            BrandId = 2,
                            CategoryId = 7,
                            CreatedDate = new DateTime(2022, 3, 19, 22, 15, 7, 25, DateTimeKind.Local).AddTicks(5800),
                            Description = "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.",
                            Details = "Lorem Ipsum is simply dummy text of the printing and typesetting industry.",
                            IsFeatured = true,
                            Name = "Apple 20W USB Type-C Charger",
                            OriginalPrice = 650000m,
                            Price = 700000m,
                            Stock = 10,
                            ViewCount = 0,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 5,
                            BrandId = 15,
                            CategoryId = 8,
                            CreatedDate = new DateTime(2022, 3, 19, 22, 15, 7, 25, DateTimeKind.Local).AddTicks(5800),
                            Description = "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.",
                            Details = "Lorem Ipsum is simply dummy text of the printing and typesetting industry.",
                            IsFeatured = true,
                            Name = "Stand/Aluminum Elevator Stand for iPhone, iPad, Phone with Adjustable Tilt Angle WIWU",
                            OriginalPrice = 210000m,
                            Price = 250000m,
                            Stock = 10,
                            ViewCount = 0,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 6,
                            BrandId = 15,
                            CategoryId = 9,
                            CreatedDate = new DateTime(2022, 3, 19, 22, 15, 7, 25, DateTimeKind.Local).AddTicks(5800),
                            Description = "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.",
                            Details = "Lorem Ipsum is simply dummy text of the printing and typesetting industry.",
                            IsFeatured = true,
                            Name = "WIWU Waltz Rotating Keyboard Case / Bluetooth Keyboard With Tracpad 360 Degree Rotating Screen WIWU Waltz Rotating Keyboard For iPad Pro 11 inch 2018-2021, Air 4 and iPad Gen 7/8/9",
                            OriginalPrice = 1100000m,
                            Price = 1300000m,
                            Stock = 10,
                            ViewCount = 0,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 7,
                            BrandId = 7,
                            CategoryId = 10,
                            CreatedDate = new DateTime(2022, 3, 19, 22, 15, 7, 25, DateTimeKind.Local).AddTicks(5800),
                            Description = "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.",
                            Details = "Lorem Ipsum is simply dummy text of the printing and typesetting industry.",
                            IsFeatured = true,
                            Name = "9H Anti-Scratch, Anti-Shock, Anti-Fingerprint Tempered Glass For All iPad JCPAL iClara (iPad Pro 11', Pro 12'9, Air 1/2/3/4, Mini 6, Gen 2/3/4/ 5/6/7/8/9)",
                            OriginalPrice = 300000m,
                            Price = 350000m,
                            Stock = 10,
                            ViewCount = 0,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 8,
                            BrandId = 8,
                            CategoryId = 12,
                            CreatedDate = new DateTime(2022, 3, 19, 22, 15, 7, 25, DateTimeKind.Local).AddTicks(5810),
                            Description = "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.",
                            Details = "Lorem Ipsum is simply dummy text of the printing and typesetting industry.",
                            IsFeatured = true,
                            Name = "KEYCHRON K6 Mechanical Keyboard Aluminum – No LED – HOTSWAP",
                            OriginalPrice = 16000000m,
                            Price = 1890000m,
                            Stock = 10,
                            ViewCount = 0,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 9,
                            BrandId = 9,
                            CategoryId = 13,
                            CreatedDate = new DateTime(2022, 3, 19, 22, 15, 7, 25, DateTimeKind.Local).AddTicks(5810),
                            Description = "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.",
                            Details = "Lorem Ipsum is simply dummy text of the printing and typesetting industry.",
                            IsFeatured = true,
                            Name = "LOFREE Maus Blue Pearl Bluetooth Mouse",
                            OriginalPrice = 1200000m,
                            Price = 1500000m,
                            Stock = 10,
                            ViewCount = 0,
                            isDeleted = false
                        });
                });

            modelBuilder.Entity("eCommerce.Backend.Models.Rating", b =>
                {
                    b.Property<int>("RateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RateId"), 1L, 1);

                    b.Property<string>("Comment")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsApproved")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<int>("RatePoint")
                        .HasColumnType("int");

                    b.Property<string>("ReviewerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RateId");

                    b.HasIndex("ProductId");

                    b.ToTable("Ratings", (string)null);
                });

            modelBuilder.Entity("eCommerce.Backend.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("eCommerce.Backend.Models.Cart", b =>
                {
                    b.HasOne("eCommerce.Backend.Models.Product", "Product")
                        .WithMany("Carts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eCommerce.Backend.Models.User", "User")
                        .WithMany("Carts")
                        .HasForeignKey("UserId");

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("eCommerce.Backend.Models.Order", b =>
                {
                    b.HasOne("eCommerce.Backend.Models.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("eCommerce.Backend.Models.OrderDetail", b =>
                {
                    b.HasOne("eCommerce.Backend.Models.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eCommerce.Backend.Models.Product", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("eCommerce.Backend.Models.Product", b =>
                {
                    b.HasOne("eCommerce.Backend.Models.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eCommerce.Backend.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("eCommerce.Backend.Models.Rating", b =>
                {
                    b.HasOne("eCommerce.Backend.Models.Product", "Product")
                        .WithMany("ProductRatings")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("eCommerce.Backend.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("eCommerce.Backend.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eCommerce.Backend.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("eCommerce.Backend.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("eCommerce.Backend.Models.Brand", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("eCommerce.Backend.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("eCommerce.Backend.Models.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("eCommerce.Backend.Models.Product", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("OrderDetails");

                    b.Navigation("ProductRatings");
                });

            modelBuilder.Entity("eCommerce.Backend.Models.User", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
